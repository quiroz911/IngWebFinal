// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Enum_RoleName {
  employee
  leader
  administrator
  superuser
}

model Page {
  id        String   @id @default(cuid())
  name      String
  path      String   @unique
  roles     Role[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id        String        @id @default(cuid())
  name      Enum_RoleName @unique
  users     User[]
  pages     Page[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model User {
  id                 String      @id @default(cuid())
  name               String?
  email              String?     @unique
  emailVerified      DateTime?
  image              String?
  projectLeader      Project[]   @relation(name: "leader")
  projectLeaderId    String?
  ProjectMember      Project[]   @relation(references: [id], name: "member")
  projectMemberId    String?
  Department         Department? @relation(fields: [departmentId], references: [id], name: "employees")
  departmentId       String?
  departmentLeader   Department?  @relation(name: "deparLeader", references: [id], fields: [departmentLeaderId])
  departmentLeaderId String?
  role               Role?       @relation(fields: [roleId], references: [id])
  roleId             String?
  accounts           Account[]
  sessions           Session[]
}

model Project {
  id           String      @id @default(cuid())
  name         String
  start_date   DateTime
  end_date     DateTime
  leader       User        @relation(fields: [id_leader], references: [id], name: "leader")
  id_leader    String
  employees    User[]      @relation(name: "member")
  Department   Department? @relation(fields: [departmentId], references: [id])
  departmentId String?
  files        File[]
}

model Department {
  id        String    @id @default(cuid())
  name      String
  employees User[]    @relation(name: "employees")
  id_leader String
  leader    User?      @relation(name: "deparLeader")
  projects  Project[]
  userId    String
}

model File {
  id        String   @id @default(cuid())
  format    String
  name      String
  url       String
  Project   Project? @relation(fields: [projectId], references: [id])
  projectId String?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
